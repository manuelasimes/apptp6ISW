trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  nodeVersion: "18.19.0"
  frontPath: "./EmployeeCrudAngular"
  backPath: "./EmployeeCrudApi"
  solution: "EmployeeCrudApi/EmployeeCrudApi.sln"
  buildConfiguration: "Release"
  backAppName: "EMployeeCrudApiQA"
  frontAppName: "EmployeeCrudAngularQA"
  azureSubs: "Azure"
  #sonarCloudSubs: "SonarCloud"
  #sonarCloudOrg: "mateonegri"
  #sonarCloudProjectKey: "mateonegri_tp-06"
  #sonarCloudProjectName: "tp-06"

stages:
- stage: Build 
  displayName: "Build Back-End and Front-End"
  jobs:
    - job: build_backend
      displayName: 'Build Backend'
      pool:
        vmImage: 'windows-latest'
      variables:
        solution: './EmployeeCrudApi/*.sln'  # Ajustar según la ubicación real de tu solución
        buildPlatform: 'Any CPU'
        buildConfiguration: 'Release'
      
      steps:
      - checkout: self
        fetchDepth: 0
      - task: UseDotNet@2  # Agregar este paso para usar .NET 8
        inputs:
          packageType: 'sdk'
          version: '8.x'  # Asegúrate de que sea .NET 8
          installationPath: $(Agent.ToolsDirectory)/dotnet
  # Agregar un script para imprimir el valor de la variable solution
      - script: |
          echo "Logging the solution path:"
          echo "Solution path: $(solution)"
        displayName: 'Log solution path'
      - task: DotNetCoreCLI@2
        displayName: 'Restaurar paquetes NuGet'
        inputs:
          command: restore
          projects: '$(solution)'
      - task: DotNetCoreCLI@2
        displayName: 'Ejecutar pruebas de la API'
        inputs:
          command: 'test'
          projects: './EmployeeCrudApi/*.csproj'
          arguments: '--collect:"XPlat Code Coverage"'
      - task: PublishCodeCoverageResults@2
        inputs:
          summaryFileLocation: '$(Agent.TempDirectory)//*.cobertura.xml'
          failIfCoverageEmpty: false
        displayName: 'Publicar resultados de code coverage del back-end'
      #- task: SonarCloudPrepare@2
        #inputs:
         # SonarCloud: $(sonarCloudSubs)
          #organization: $(sonarCloudOrg)
          #scannerMode: 'MSBuild'
          #projectKey: $(sonarCloudProjectKey)
          #projectName: $(sonarCloudProjectName)
      - task: DotNetCoreCLI@2
        displayName: 'Compilar la solución'
        inputs:
          command: build
          projects: '$(solution)'
          arguments: '--configuration $(buildConfiguration)'
      #- task: SonarCloudAnalyze@2
       # inputs:
        #  jdkversion: 'JAVA_HOME_17_X64'
      #- task: SonarCloudPublish@2
       # inputs:
        #  pollingTimeoutSec: '300'
      - task: DotNetCoreCLI@2
        displayName: 'Publicar aplicación'
        inputs:
          command: publish
          publishWebProjects: True
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: true
      - task: PublishBuildArtifacts@1
        displayName: 'Publicar artefactos de compilación'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'backend-drop'
          publishLocation: 'Container'
        
    - job: build_frontend
      displayName: 'Build Frontend'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: self
        fetchDepth: 0
     # - task: SonarCloudPrepare@2
      #  inputs:
       #   SonarCloud: 'SonarCloud'
        #  organization: 'mateonegri'
         # scannerMode: 'CLI'
          #configMode: 'manual'
         # cliprojectKey: 'mateonegri_tp-06'
          #cliprojectName: 'tp-06'
          #cliSources: '.'
      - task: NodeTool@0
        inputs:
          versionSpec: '18.x'
        displayName: 'Install Node.js 18.x'
      # Step to install Angular CLI
      - script: npm install @angular/cli@latest
        displayName: 'Install Angular CLI in EmployeeCrudAngular'
        workingDirectory: 'EmployeeCrudAngular'
      # Step to install dependencies
      - script: npm install
        displayName: 'npm install in EmployeeCrudAngular'
        workingDirectory: 'EmployeeCrudAngular'
      #- task: Cache@2
      #  inputs:
      #    key: 'npm | "$(Agent.OS)" | $(frontPath)/package-lock.json'
      #    path: "$(frontPath)/node_modules"
      #    restoreKeys: |
      #      npm | "$(Agent.OS)"
      #  displayName: "Cache dependences"
      - script: npx ng test --karma-config=karma.conf.js --watch=false --browsers ChromeHeadless --code-coverage
        displayName: 'Ejecutar pruebas del front'
        workingDirectory: 'EmployeeCrudAngular'
        continueOnError: true  # Para que el pipeline continúe aunque falle
      - task: PublishCodeCoverageResults@2
        inputs:
          summaryFileLocation: 'EmployeeCrudAngular/coverage/lcov.info'
          failIfCoverageEmpty: false
        condition: always()  # Esto asegura que se ejecute siempre
        displayName: 'Publicar resultados de code coverage del front'  
      
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'EmployeeCrudAngular/test-results/test-results.xml'
          failTaskOnFailedTests: true
        condition: always()  # Esto asegura que se ejecute siempre
        displayName: 'Publicar resultados de pruebas unitarias del front'
      # Step to build the Angular app
      - script: npm run build
        displayName: 'Build Angular App in EmployeeCrudAngular'
        workingDirectory: 'EmployeeCrudAngular'
      
 # - task: SonarCloudAnalyze@2
  #    - task: SonarCloudPublish@2
   #     inputs:
    #      pollingTimeoutSec: '300'
      # Publish the dist folder as a pipeline artifact
      - task: PublishBuildArtifacts@1
        displayName: "Publish Front-End Artifacts"
        inputs:
          PathtoPublish: "$(frontPath)/dist"
          ArtifactName: "frontend-drop"
          publishLocation: "Container"

- stage: DeployToQA
  displayName: "Deploy to QA"
  dependsOn: [Build]
  jobs:
    - job: DeployBackToQA
      displayName: "Deploy Back-End to QA Environment"
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Download Back-End Artifacts"
          inputs:
            buildType: "current"
            artifactName: "backend-drop"
            targetPath: "$(Pipeline.Workspace)/backend-drop"

        - task: AzureWebApp@1
          displayName: "Deploy Back-End Artifacts"
          inputs:
            azureSubscription: "$(azureSubs)"
            appType: "webApp"
            appName: "$(backAppName)"
            package: "$(Pipeline.Workspace)/backend-drop/*.zip"
            deploymentMethod: "auto"

    - job: DeployFrontToQA
      displayName: "Deploy Front-End to QA Environment"
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: "Download Front-End Artifacts"
          inputs:
            buildType: "current"
            artifactName: "frontend-drop"
            targetPath: "$(Pipeline.Workspace)/frontend-drop"

        - task: AzureWebApp@1
          displayName: "Deploy Front-End Artifacts"
          inputs:
            azureSubscription: "$(azureSubs)"
            appType: "webApp"
            appName: "$(frontAppName)"
            package: "$(Pipeline.Workspace)/frontend-drop/employee-crud-angular/browser"
            deploymentMethod: auto